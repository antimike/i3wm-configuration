#!/usr/bin/env -S python3 -W ignore::DeprecationWarning
# -*- python -*-

"""Simple dimmer for xss-lock."""

# It assumes we are using a compositor.

import gi

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk, GLib
import cairo
import argparse


def realize_event(widget):
    window = widget.get_window()
    window.set_override_redirect(True)
    window.set_keep_above(True)


def draw_event(widget, event, options, elapsed):
    def dim(once=False):
        cr = Gdk.cairo_create(window)

        # Background
        delta = options.max_opacity - options.min_opacity
        current = elapsed[0] / options.delay
        opacity = delta * current + options.min_opacity
        cr.set_source_rgba(0, 0, 0, opacity)
        cr.set_operator(cairo.OPERATOR_SOURCE)
        cr.paint()

        # Remaining time
        remaining = str(round(options.delay - elapsed[0]))
        wwidth, wheight = widget.get_default_size()
        cr.set_source_rgba(1, 1, 1, opacity)
        cr.select_font_face(
            options.font, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_BOLD
        )
        cr.set_font_size(wheight // 4)
        _, _, twidth, theight, _, _ = cr.text_extents(remaining)
        cr.move_to(wwidth // 2 - twidth // 2, wheight // 2 + theight // 2)
        cr.show_text(remaining)

        # Rearm timer
        if not once:
            elapsed[0] += options.step
            if elapsed[0] <= options.delay:
                GLib.timeout_add(options.step * 1000, dim)

    window = widget.get_window()
    if not elapsed:
        # First time we are called.
        elapsed.append(0)
        dim()
    else:
        # Timers already running, just repaint
        dim(once=True)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--min-opacity", type=float, default=0.2)
    parser.add_argument("--max-opacity", type=float, default=1)
    parser.add_argument("--step", type=float, default=0.1)
    parser.add_argument("--delay", type=float, default=10)
    parser.add_argument("--font", default="DejaVu Sans")
    options = parser.parse_args()

    display = Gdk.Display.get_default()
    for i in range(display.get_n_monitors()):
        geom = display.get_monitor(i).get_geometry()
        once = []

        window = Gtk.Window()
        window.set_wmclass("dimmer", "Dimmer")
        window.set_app_paintable(True)
        window.set_type_hint(Gdk.WindowTypeHint.SPLASHSCREEN)
        window.set_visual(window.get_screen().get_rgba_visual())

        window.set_default_size(geom.width, geom.height)
        window.move(geom.x, geom.y)

        window.connect("draw", draw_event, options, [])
        window.connect("delete-event", Gtk.main_quit)
        window.connect("realize", realize_event)

        window.show_all()

    Gtk.main()
